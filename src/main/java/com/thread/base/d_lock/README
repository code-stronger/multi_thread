第四章 Lock的使用
1、ReentrantLock类的使用
2、ReentrantReadWriteLock类的使用

1、ReentrantLock类的使用
在java多线程中，可以使用synchronized关键字来实现线程间的同步互斥，也可以使用ReentrantLock类，
并且在功能上更加强大，比如具有嗅探锁定，多路分支通知等功能，更加灵活
(1) private ReentrantLock lock = new ReentrantLock();
    private Condition condition = lock.newCondition(); 可以创建多个Condition对象，实现线程await/signal控制
    {
        lock.lock();
        condition.await() / condition.signal() 这两个方法调用时必须持有锁
        代码块。。。
        lock.unlock();
    }
(2) private ReentrantLock lock = new ReentrantLock(boolean fair) 公平锁/非公平锁
公平锁是按照线程的调用顺序获得锁，而非公平锁线程是随机获得锁
(3)
    int lock.getHoldCount() 当前线程保持此锁定的个数
    thread1.test1();
    test1(){
        lock.lock()
        System.out.println(lock.getHoldCount); //1
        test2()
        lock.unlock();
    }
    test2(){
        lock.lock()
        System.out.println(lock.getHoldCount); //2
        lock.unlock();
    }
    int lock.getQueueLength() 返回正在等待获取此锁定的线程估计数
    int lock.getWaitQueueLength(Condition condition) 返回等待与此锁定相关的给定条件condition线程估计数
        比如有5个线程，每个线程都执行了同一个condition对象的await()方法，则返回的值是5

    通俗来说：int getHoldCount当前线程获取了几次lock.lock()
             int getQueueLength当前有几个线程正在等待获取锁
             int getWaitQueueLength当前有几个线程执行了await()方法

    boolean lock.hasQueueThread(Thread thread)指定线程是否正在等待获取此锁定
    boolean lock.hasQueueThreads() 查询是否有线程正在等待获取此锁定
    boolean lock.hasWaiters(Condition condition) 查询是否有线程正在等待与此锁定有关的condition条件
    boolean lock.isFair() 是不是公平锁
    boolean lock.isHeldByCurrentThread() 当前线程是否持有此锁定
    boolean lock.isLocked() 当前锁是否被任意线程保持

    lock.lockInterruptibly()
        和lock.lock() 的区别是，当调用thread.interrupt()时，前者直接抛出异常停止；后者把所有代码执行完之后才停止
    boolean lock.tryLock() 试图获取锁，如果此锁被其他线程正持有，返回false，如果此锁空闲，则返回true
    boolean lock.tryLock(long timeout, TimeUnit unit) 设置一个过期时间

    condition.awaitUninterruptibly()
        和condition.await()的区别是，当调用thread.interrupt()时，前者不会抛出异常，而且一直运行；后者会抛出异常，程序停止

2、ReentrantReadWriteLock类的使用
ReentrantLock具有完全互斥排他的效果，但是有时候的效率却是非常低下的
ReentrantReadWriteLock 读写锁，也就是有两个锁，一个是读操作相关的锁，也称为共享锁；
另一个是写操作相关的锁，也叫排它锁。
也就是多个读锁之间不互斥，读锁与写锁互斥，写锁与写锁互斥